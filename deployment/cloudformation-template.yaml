AWSTemplateFormatVersion: '2010-09-09'
Description: 'Webhook Lambda System Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: 'VPC ID for Lambda functions'
  
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: 'Subnet IDs for Lambda functions'
  
  DatabaseUrl:
    Type: String
    Description: 'PostgreSQL connection URL'
    NoEcho: true

  DatabaseUsername:
    Type: String
    Description: 'PostgreSQL connection username'
    NoEcho: true

  DatabasePassword:
    Type: String
    Description: 'PostgreSQL connection password'
    NoEcho: true

  ArtifactVersion:
    Type: String
    Description: 'Version identifier for Lambda artifacts (e.g., timestamp or git hash)'

Resources:
  WebhookScheduleGroup:
     Type: AWS::Scheduler::ScheduleGroup
     Properties:
      Name: !Sub "pi-checkout-${Environment}-schgrp-${AWS::Region}-webhook"

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
     GroupDescription: !Sub "Security group for webhook Lambdas in ${Environment}"
     VpcId: !Ref VpcId
     SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0

  EventBridgeSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "pi-checkout-${Environment}-role-${AWS::Region}-eventbridge-scheduler"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowSQSSendMessage
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource:
                  - !GetAtt DeliveryWebhookQueue.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "pi-checkout-${Environment}-role-${AWS::Region}-lambdaexecutionrole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: LambdaSQSPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:SendMessage
                  - sqs:GetQueueAttributes
                Resource:
                 - !GetAtt PublishWebhookQueue.Arn
                 - !GetAtt DeliveryWebhookQueue.Arn
        - PolicyName: LambdaSchedulerPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - scheduler:CreateSchedule
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt EventBridgeSchedulerRole.Arn
        - PolicyName: LambdaDynamoDBPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/pi-shared-${Environment}-dyb-${AWS::Region}-configs"

  # Dead Letter Queue
  PublishWebhookDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'pi-checkout-${Environment}-sqs-${AWS::Region}-publish-webhook-dlq'
      MessageRetentionPeriod: 1209600  # 14 days

  PublishWebhookQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'pi-checkout-${Environment}-sqs-${AWS::Region}-publish-webhook-queue'
      VisibilityTimeout: 120
      MessageRetentionPeriod: 1209600  # 14 days
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt PublishWebhookDLQ.Arn
        maxReceiveCount: 3

  # Dead Letter Queue
  DeliveryWebhookDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'pi-checkout-${Environment}-sqs-${AWS::Region}-delivery-webhook-dlq'
      MessageRetentionPeriod: 1209600  # 14 days

  DeliveryWebhookQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'pi-checkout-${Environment}-sqs-${AWS::Region}-delivery-webhook-queue'
      VisibilityTimeout: 120
      MessageRetentionPeriod: 1209600  # 14 days
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeliveryWebhookDLQ.Arn
        maxReceiveCount: 3

  # Publisher Lambda Function
  PublisherLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'pi-checkout-${Environment}-lmd-${AWS::Region}-webhookpublisher'
      Runtime: java21
      Handler: com.payintelli.webhook.handlers.WebhookPublisherLambda::handleRequest
      Code:
        S3Bucket: !Sub 'pi-checkout-${Environment}-s3-${AWS::Region}-webhook'
        S3Key: !Sub '${ArtifactVersion}/webhook-publisher.jar'
      MemorySize: 512
      Timeout: 60
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment: 
        Variables:
          DATABASE_URL: !Ref DatabaseUrl
          DATABASE_USERNAME: !Ref DatabaseUsername
          DATABASE_PASSWORD: !Ref DatabasePassword
          SQS_QUEUE_URL: !Ref DeliveryWebhookQueue
          DYNAMODB_TABLE_NAME: !Sub "pi-shared-${Environment}-dyb-${AWS::Region}-configs"
      SnapStart:
        ApplyOn: PublishedVersions

  # Delivery Lambda Function  
  DeliveryLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'pi-checkout-${Environment}-lmd-${AWS::Region}-webhookdelivery'
      Runtime: java21
      Handler: com.payintelli.webhook.handlers.WebhookDeliveryLambda::handleRequest
      Code:
        S3Bucket: !Sub 'pi-checkout-${Environment}-s3-${AWS::Region}-webhook'
        S3Key: !Sub '${ArtifactVersion}/webhook-delivery.jar'
      MemorySize: 1024
      Timeout: 120
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DATABASE_URL: !Ref DatabaseUrl
          DATABASE_USERNAME: !Ref DatabaseUsername
          DATABASE_PASSWORD: !Ref DatabasePassword
          SQS_QUEUE_URL: !Ref DeliveryWebhookQueue
          SQS_QUEUE_ARN: !GetAtt DeliveryWebhookQueue.Arn
          EVENTBRIDGE_ROLE_ARN: !GetAtt EventBridgeSchedulerRole.Arn
          SCHEDULE_ROLE_FORMAT: !Sub 'pi-checkout-${Environment}-sch-${AWS::Region}-%s-attempt-%s'
          SCHEDULE_ROLE_GROUP: !Ref WebhookScheduleGroup
          DYNAMODB_TABLE_NAME: !Sub "pi-shared-${Environment}-dyb-${AWS::Region}-configs"
          MAX_ATTEMPTS: '5'
      SnapStart:
        ApplyOn: PublishedVersions

  # SQS Event Source Mapping
  DeliverySQSEventSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt DeliveryWebhookQueue.Arn
      FunctionName: !Ref DeliveryLambdaAlias
      BatchSize: 10
      MaximumBatchingWindowInSeconds: 5

  PublishSQSEventSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt PublishWebhookQueue.Arn
      FunctionName: !Ref PublisherLambdaAlias
      BatchSize: 10
      MaximumBatchingWindowInSeconds: 5

  # --- Versions & Aliases for SnapStart ---
  PublisherLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref PublisherLambda
      Description: !Sub "Publisher Lambda version for ${ArtifactVersion}"

  PublisherLambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref PublisherLambda
      FunctionVersion: !GetAtt PublisherLambdaVersion.Version
      Name: live

  DeliveryLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref DeliveryLambda
      Description: !Sub "Delivery Lambda version for ${ArtifactVersion}"

  DeliveryLambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref DeliveryLambda
      FunctionVersion: !GetAtt DeliveryLambdaVersion.Version
      Name: live
